package ponder.galaxy.model.io

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class RedditIdentityDto(
    @SerialName("is_employee") val isEmployee: Boolean,
    @SerialName("seen_layout_switch") val seenLayoutSwitch: Boolean,
    @SerialName("has_visited_new_profile") val hasVisitedNewProfile: Boolean,
    @SerialName("pref_no_profanity") val prefNoProfanity: Boolean,
    @SerialName("has_external_account") val hasExternalAccount: Boolean,
    @SerialName("pref_geopopular") val prefGeopopular: String,
    @SerialName("seen_redesign_modal") val seenRedesignModal: Boolean,
    @SerialName("pref_show_trending") val prefShowTrending: Boolean,
    @SerialName("subreddit") val subreddit: RedditSubredditDto,
    @SerialName("pref_show_presence") val prefShowPresence: Boolean,
    @SerialName("snoovatar_img") val snoovatarImg: String,
    @SerialName("snoovatar_size") val snoovatarSize: List<Int>? = null,
    @SerialName("gold_expiration") val goldExpiration: Double? = null,
    @SerialName("has_gold_subscription") val hasGoldSubscription: Boolean,
    @SerialName("is_sponsor") val isSponsor: Boolean,
    @SerialName("num_friends") val numFriends: Int,
    @SerialName("features") val features: RedditFeaturesDto,
    @SerialName("can_edit_name") val canEditName: Boolean,
    @SerialName("verified") val verified: Boolean,
    @SerialName("new_modmail_exists") val newModmailExists: Boolean? = null,
    @SerialName("pref_autoplay") val prefAutoplay: Boolean,
    @SerialName("coins") val coins: Int,
    @SerialName("has_paypal_subscription") val hasPaypalSubscription: Boolean,
    @SerialName("has_subscribed_to_premium") val hasSubscribedToPremium: Boolean,
    @SerialName("id") val id: String,
    @SerialName("has_stripe_subscription") val hasStripeSubscription: Boolean,
    @SerialName("oauth_client_id") val oauthClientId: String,
    @SerialName("can_create_subreddit") val canCreateSubreddit: Boolean,
    @SerialName("over_18") val over18: Boolean,
    @SerialName("is_gold") val isGold: Boolean,
    @SerialName("is_mod") val isMod: Boolean,
    @SerialName("awarder_karma") val awarderKarma: Int,
    @SerialName("suspension_expiration_utc") val suspensionExpirationUtc: Double? = null,
    @SerialName("has_verified_email") val hasVerifiedEmail: Boolean,
    @SerialName("is_suspended") val isSuspended: Boolean,
    @SerialName("pref_video_autoplay") val prefVideoAutoplay: Boolean,
    @SerialName("in_chat") val inChat: Boolean,
    @SerialName("has_android_subscription") val hasAndroidSubscription: Boolean,
    @SerialName("in_redesign_beta") val inRedesignBeta: Boolean,
    @SerialName("icon_img") val iconImg: String,
    @SerialName("has_mod_mail") val hasModMail: Boolean,
    @SerialName("pref_nightmode") val prefNightmode: Boolean,
    @SerialName("awardee_karma") val awardeeKarma: Int,
    @SerialName("hide_from_robots") val hideFromRobots: Boolean,
    @SerialName("password_set") val passwordSet: Boolean,
    @SerialName("link_karma") val linkKarma: Int,
    @SerialName("force_password_reset") val forcePasswordReset: Boolean,
    @SerialName("total_karma") val totalKarma: Int,
    @SerialName("seen_give_award_tooltip") val seenGiveAwardTooltip: Boolean,
    @SerialName("inbox_count") val inboxCount: Int,
    @SerialName("seen_premium_adblock_modal") val seenPremiumAdblockModal: Boolean,
    @SerialName("pref_top_karma_subreddits") val prefTopKarmaSubreddits: Boolean,
    @SerialName("has_mail") val hasMail: Boolean,
    @SerialName("pref_show_snoovatar") val prefShowSnoovatar: Boolean,
    @SerialName("name") val name: String,
    @SerialName("pref_clickgadget") val prefClickgadget: Int,
    @SerialName("created") val created: Double,
    @SerialName("gold_creddits") val goldCreddits: Int,
    @SerialName("created_utc") val createdUtc: Double,
    @SerialName("has_ios_subscription") val hasIosSubscription: Boolean,
    @SerialName("pref_show_twitter") val prefShowTwitter: Boolean,
    @SerialName("in_beta") val inBeta: Boolean,
    @SerialName("comment_karma") val commentKarma: Int,
    @SerialName("accept_followers") val acceptFollowers: Boolean,
    @SerialName("has_subscribed") val hasSubscribed: Boolean,
    @SerialName("linked_identities") val linkedIdentities: List<String>,
    @SerialName("seen_subreddit_chat_ftux") val seenSubredditChatFtux: Boolean
)

@Serializable
data class RedditSubredditDto(
    @SerialName("default_set") val defaultSet: Boolean,
    @SerialName("user_is_contributor") val userIsContributor: Boolean,
    @SerialName("banner_img") val bannerImg: String,
    @SerialName("restrict_posting") val restrictPosting: Boolean,
    @SerialName("user_is_banned") val userIsBanned: Boolean,
    @SerialName("free_form_reports") val freeFormReports: Boolean,
    @SerialName("community_icon") val communityIcon: String? = null,
    @SerialName("show_media") val showMedia: Boolean,
    @SerialName("icon_color") val iconColor: String,
    @SerialName("user_is_muted") val userIsMuted: Boolean? = null,
    @SerialName("display_name") val displayName: String,
    @SerialName("header_img") val headerImg: String? = null,
    @SerialName("title") val title: String,
    @SerialName("coins") val coins: Int,
    @SerialName("previous_names") val previousNames: List<String>,
    @SerialName("over_18") val over18: Boolean,
    @SerialName("icon_size") val iconSize: List<Int>,
    @SerialName("primary_color") val primaryColor: String,
    @SerialName("icon_img") val iconImg: String,
    @SerialName("description") val description: String,
    @SerialName("allowed_media_in_comments") val allowedMediaInComments: List<String>,
    @SerialName("submit_link_label") val submitLinkLabel: String,
    @SerialName("header_size") val headerSize: List<Int>? = null,
    @SerialName("restrict_commenting") val restrictCommenting: Boolean,
    @SerialName("subscribers") val subscribers: Int,
    @SerialName("submit_text_label") val submitTextLabel: String,
    @SerialName("is_default_icon") val isDefaultIcon: Boolean,
    @SerialName("link_flair_position") val linkFlairPosition: String,
    @SerialName("display_name_prefixed") val displayNamePrefixed: String,
    @SerialName("key_color") val keyColor: String,
    @SerialName("name") val name: String,
    @SerialName("is_default_banner") val isDefaultBanner: Boolean,
    @SerialName("url") val url: String,
    @SerialName("quarantine") val quarantine: Boolean,
    @SerialName("banner_size") val bannerSize: List<Int>? = null,
    @SerialName("user_is_moderator") val userIsModerator: Boolean,
    @SerialName("accept_followers") val acceptFollowers: Boolean,
    @SerialName("public_description") val publicDescription: String,
    @SerialName("link_flair_enabled") val linkFlairEnabled: Boolean,
    @SerialName("disable_contributor_requests") val disableContributorRequests: Boolean,
    @SerialName("subreddit_type") val subredditType: String,
    @SerialName("user_is_subscriber") val userIsSubscriber: Boolean
)

@Serializable
data class RedditFeaturesDto(
    @SerialName("modmail_harassment_filter") val modmailHarassmentFilter: Boolean,
    @SerialName("mod_service_mute_writes") val modServiceMuteWrites: Boolean,
    @SerialName("promoted_trend_blanks") val promotedTrendBlanks: Boolean,
    @SerialName("show_amp_link") val showAmpLink: Boolean,
    val chat: Boolean,
    @SerialName("is_email_permission_required") val isEmailPermissionRequired: Boolean,
    @SerialName("mod_awards") val modAwards: Boolean,
    @SerialName("expensive_coins_package") val expensiveCoinsPackage: Boolean,
    @SerialName("awards_on_streams") val awardsOnStreams: Boolean,
    @SerialName("chat_subreddit") val chatSubreddit: Boolean,
    @SerialName("cookie_consent_banner") val cookieConsentBanner: Boolean,
    @SerialName("modlog_copyright_removal") val modlogCopyrightRemoval: Boolean,
    @SerialName("show_nps_survey") val showNpsSurvey: Boolean,
    @SerialName("do_not_track") val doNotTrack: Boolean,
    @SerialName("images_in_comments") val imagesInComments: Boolean,
    @SerialName("mod_service_mute_reads") val modServiceMuteReads: Boolean,
    @SerialName("chat_user_settings") val chatUserSettings: Boolean,
    @SerialName("use_pref_account_deployment") val usePrefAccountDeployment: Boolean,
    @SerialName("premium_subscriptions_table") val premiumSubscriptionsTable: Boolean,
    @SerialName("crowd_control_for_post") val crowdControlForPost: Boolean,
    @SerialName("chat_group_rollout") val chatGroupRollout: Boolean,
    @SerialName("resized_styles_images") val resizedStylesImages: Boolean,
    @SerialName("noreferrer_to_noopener") val noreferrerToNoopener: Boolean
)
